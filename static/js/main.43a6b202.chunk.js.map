{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","key","process","useState","images","setImages","page","setPage","query","setQuery","error","setError","useEffect","getImages","apiUrl","fetch","then","res","json","data","console","log","imagesApi","results","length","className","onSubmit","e","preventDefault","type","placeholder","value","onChange","target","dataLength","next","prev","hasMore","loader","columnsCountBreakPoints","350","750","900","gutter","map","image","index","href","links","html","rel","user","name","src","urls","regular","alt","alt_description","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAMe,SAASA,IAEtB,IAAMC,EAAMC,8CAFgB,EAGAC,mBAAS,IAHT,mBAGrBC,EAHqB,KAGbC,EAHa,OAIJF,mBAAS,GAJL,mBAIrBG,EAJqB,KAIfC,EAJe,OAKFJ,mBAAS,IALP,mBAKrBK,EALqB,KAKdC,EALc,OAMFN,oBAAS,GANP,mBAMrBO,EANqB,KAMdC,EANc,KAQ5BC,qBAAU,WACRC,MACC,CAACP,IAMJ,SAASO,IACP,IAAIC,EAAM,mCACNN,IAAOM,EAAM,uDAAmDN,IACpEM,GAAM,gBAAaR,GACnBQ,GAAM,qBAAkBb,GAExBc,MAAMD,GACHE,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAAU,IAAD,EACdC,QAAQC,IAAIF,GACZ,IAAMG,EAAS,UAAGH,EAAKI,eAAR,QAAmBJ,EAClC,GAAyB,IAArBG,EAAUE,OAAd,CAIA,GAAa,IAATlB,EAGF,OAFAD,EAAUiB,QACVX,GAAS,GAGXN,GAAU,SAACD,GAAD,4BAAgBA,GAAhB,YAA2BkB,OACrCX,GAAS,QATPA,GAAS,MAiCjB,OACE,sBAAKc,UAAU,MAAf,UACE,wDACA,uBAAMC,SAvBW,SAACC,GACpBA,EAAEC,iBACFf,IACAN,EAAQ,IAoBN,UACE,uBACEsB,KAAK,OACLC,YAAY,qBACZC,MAAOvB,EACPwB,SAzDa,SAACL,GACpBlB,EAASkB,EAAEM,OAAOF,UA0Dd,+CAEDrB,EACC,oBAAIe,UAAU,eAAd,wEACG,cAAC,IAAD,CACHS,WAAY9B,EAAOoB,OACnBW,KA9BgB,WACpB5B,GAAQ,SAAC6B,GAAD,OAAUA,EAAO,MA8BrBC,SAAS,EACTC,OAAQ,4CAJL,SAMH,cAAC,oBAAD,CACEC,wBAAyB,CAAEC,IAAK,EAAGC,IAAK,EAAGC,IAAK,GADlD,SAGE,cAAC,IAAD,CAASC,OAAO,OAAhB,SACGvC,EAAOwC,KAAI,SAACC,EAAOC,GAAR,OACV,mBACErB,UAAU,QAEVsB,KAAMF,EAAMG,MAAMC,KAClBhB,OAAO,SACPiB,IAAI,sBALN,SAOE,gCACE,sBAAMzB,UAAU,OAAhB,UACE,4CACA,oBAAIA,UAAU,YAAd,SAA2BoB,EAAMM,KAAKC,UAExC,qBACEC,IAAKR,EAAMS,KAAKC,QAChBC,IAAKX,EAAMY,sBAZVX,eC9FrB,IAYeY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB5C,MAAK,YAAkD,IAA/C6C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.43a6b202.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroll-component\";\nimport Masonry, { ResponsiveMasonry } from \"react-responsive-masonry\"\n\n\nexport default function App() {\n\n  const key = process.env.REACT_APP_UNSPLASH_ACCESS_KEY;\n  const [images, setImages] = useState([]);\n  const [page, setPage] = useState(1);\n  const [query, setQuery] = useState(\"\");\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    getImages()\n  }, [page])\n\n  const handleSearch = (e) => {\n    setQuery(e.target.value)\n  }\n\n  function getImages() {\n    let apiUrl = `https://api.unsplash.com/photos?`;\n    if (query) apiUrl = `https://api.unsplash.com/search/photos?query=${query}`;\n    apiUrl += `&page=${page}`;\n    apiUrl += `&client_id=${key}`;\n\n    fetch(apiUrl)\n      .then((res) => res.json())\n      .then((data) => {\n        console.log(data)\n        const imagesApi = data.results ?? data;\n        if (imagesApi.length === 0) {\n          setError(true);\n          return\n        }\n        if (page === 1) {\n          setImages(imagesApi);\n          setError(false);\n          return\n        }\n        setImages((images) => [...images, ...imagesApi]);\n        setError(false);\n      });\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    getImages();\n    setPage(1);\n  }\n\n  const addMoreImages = () => {\n    setPage((prev) => prev + 1);\n  }\n\n  if (!key) {\n    return (\n      <a href=\"https://unsplash.com/developers\"\n        className=\"error\"\n      >\n        Required: Get Your Unsplash API Key\n      </a>\n    )\n  }\n\n  return (\n    <div className=\"app\">\n      <h3>Unsplash Image Gallery</h3>\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          placeholder=\"Search Unsplash...\"\n          value={query}\n          onChange={handleSearch}\n        />\n        <button>Search</button>\n      </form>\n      {error ? (\n        <h3 className=\"search-error\">No images matched your search criteria, try something else</h3>\n      ) : (<InfiniteScroll\n        dataLength={images.length}\n        next={addMoreImages}\n        hasMore={true}\n        loader={<h4>Loading...</h4>}\n      >\n        <ResponsiveMasonry\n          columnsCountBreakPoints={{ 350: 2, 750: 2, 900: 3 }}\n        >\n          <Masonry gutter=\"10px\">\n            {images.map((image, index) => (\n              <a\n                className=\"image\"\n                key={index}\n                href={image.links.html}\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <div>\n                  <div  className=\"card\">\n                    <h5>Credit to:</h5>\n                    <h5 className=\"user-name\">{image.user.name}</h5>\n                  </div>\n                  <img\n                    src={image.urls.regular}\n                    alt={image.alt_description}\n                  />\n                </div>\n              </a>\n            ))}\n          </Masonry>\n        </ResponsiveMasonry>\n      </InfiniteScroll>)}\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}